const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/react-plotly-D8Ar5uXC.js","assets/index-_4RPVSJw.js","assets/index-BXnHoJh6.css"])))=>i.map(i=>d[i]);
import{k as st,u,C as it,a as ct,D as mt,O as ht,_ as pt,e as B,d as f,w as v,B as F}from"./index-_4RPVSJw.js";import{c as K,l as Y,i as J,N as dt,P as U}from"./param-grid-Dr2rYGca.js";import{T as vt}from"./tool-title-oEt0mL0v.js";class _t extends st{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0,error:e}}componentDidCatch(e,r){console.error("Plotly error:",e,r)}render(){return this.state.hasError?u("div",{className:"rounded-md bg-red-50 p-4 text-sm text-red-500 dark:bg-red-950 dark:text-red-400",children:"Failed to render plot. Please try refreshing the page."}):this.props.children}}const gt=ht(()=>pt(()=>import("./react-plotly-D8Ar5uXC.js").then(t=>t.r),__vite__mapDeps([0,1,2]))),ft=({x:t,yMin:e=0,yMax:r,color:l="gray",width:a=.75,dash:i="dot"})=>({type:"line",x0:t,x1:t,y0:e,y1:r,line:{color:l,width:a,dash:i}}),Tt=({x:t,label:e,yref:r="paper",xshift:l=-3,yshift:a=-15,y:i=1,textAngle:o="-90",xanchor:c="right",yanchor:m="top"})=>({text:e,x:t,xshift:l,yshift:a,y:i,yref:r,textangle:o,xanchor:c,yanchor:m,showarrow:!1}),Mt=({y:t,xMin:e=0,xMax:r=100,color:l="gray",width:a=.75,dash:i="dot"})=>({type:"line",x0:e,x1:r,y0:t,y1:t,line:{color:l,width:a,dash:i}}),wt=({className:t})=>u("div",{className:B("flex h-full w-full items-center justify-center rounded-xl bg-muted/20",t),children:u("div",{className:"animate-pulse",children:"Loading plot..."})}),S=it(({data:t,layout:e,className:r})=>{const{theme:l}=ct(),a=l==="dark"?"#09090b":"#ffffff",i=l==="dark"?"#fafafa":"#18181b",o=l==="dark"?"#27272a":"#e4e4e7",c=l==="dark"?"#a1a1aa":"#18181b",m={paper_bgcolor:a,plot_bgcolor:a,font:{color:i},legend:{itemclick:!1,itemdoubleclick:!1},margin:{b:42,l:55,r:10,t:30},xaxis:{gridcolor:o,zeroline:!1,showline:!0,linecolor:c,mirror:!0},yaxis:{gridcolor:o,zeroline:!1,showline:!0,linecolor:c,mirror:!0},showlegend:!0},T={...m,...e,font:{...m.font,...e.font},legend:{...m.legend,...e.legend},margin:{...m.margin,...e.margin},xaxis:{...m.xaxis,...e.xaxis},yaxis:{...m.yaxis,...e.yaxis}},_=t.map(y=>({type:"scatter",mode:"lines",...y}));return u(_t,{children:u(mt,{fallback:u(wt,{className:r}),children:u(gt,{data:_,layout:T,useResizeHandler:!0,className:B("h-full w-full",r),config:{displaylogo:!1}})})})});Object.defineProperty(S,"displayName",{value:"PlotlyPlot"});function q(t,e){const r=t.length;let l=new Array(r);for(let a=0;a<r;a++)l[a]=t[a]*e;return l}function xt(t,e){const r=t.length;let l=new Array(r);for(let a=0;a<r;a++)l[a]=t[a]+e;return l}function Ot(t){const e=t.length;let r=0;for(let l=0;l<e;l++)r+=t[l];return r}function Nt(t){return Ot(t)/t.length}function Q(t,e,r){const l=Math.floor((e-t)/r)+1;let a=t,i=new Array(l);for(let o=0;o<l;o++)i[o]=a,a+=r;return i}function C(t,e,r){const l=r.length;let a=new Array(l);const i=e.length-1;let o=0;for(let c=0;c<l;c++){if(r[c]<=e[0]){a[c]=t[0];continue}if(r[c]>=e[i]){a[c]=t[i];continue}for(o;o<i;o++)if(r[c]<e[o+1]){const m=(r[c]-e[o])/(e[o+1]-e[o]);a[c]=t[o]+(t[o+1]-t[o])*m;break}}return a}const Pt=[{pwm:1e3,thrust:.196,voltage:21.72,current:.042},{pwm:1001,thrust:.196,voltage:21.72,current:.042},{pwm:1012,thrust:.196,voltage:21.72,current:.041},{pwm:1024,thrust:.196,voltage:21.72,current:.041},{pwm:1038,thrust:.196,voltage:21.72,current:.042},{pwm:1051,thrust:.196,voltage:21.72,current:.042},{pwm:1065,thrust:.196,voltage:21.72,current:.042},{pwm:1078,thrust:.197,voltage:21.72,current:.046},{pwm:1092,thrust:.204,voltage:21.71,current:.315},{pwm:1105,thrust:.237,voltage:21.72,current:.23},{pwm:1118,thrust:.245,voltage:21.72,current:.178},{pwm:1130,thrust:.25,voltage:21.72,current:.187},{pwm:1145,thrust:.261,voltage:21.72,current:.217},{pwm:1158,thrust:.271,voltage:21.72,current:.238},{pwm:1172,thrust:.287,voltage:21.72,current:.297},{pwm:1186,thrust:.303,voltage:21.72,current:.311},{pwm:1198,thrust:.314,voltage:21.71,current:.354},{pwm:1212,thrust:.335,voltage:21.71,current:.428},{pwm:1225,thrust:.358,voltage:21.71,current:.482},{pwm:1239,thrust:.378,voltage:21.71,current:.547},{pwm:1252,thrust:.398,voltage:21.71,current:.608},{pwm:1266,thrust:.418,voltage:21.71,current:.665},{pwm:1279,thrust:.439,voltage:21.71,current:.722},{pwm:1292,thrust:.451,voltage:21.71,current:.771},{pwm:1306,thrust:.472,voltage:21.71,current:.849},{pwm:1319,thrust:.514,voltage:21.7,current:1.025},{pwm:1332,thrust:.546,voltage:21.7,current:1.11},{pwm:1346,thrust:.574,voltage:21.7,current:1.191},{pwm:1360,thrust:.6,voltage:21.7,current:1.302},{pwm:1373,thrust:.624,voltage:21.7,current:1.391},{pwm:1386,thrust:.647,voltage:21.7,current:1.493},{pwm:1400,thrust:.672,voltage:21.7,current:1.584},{pwm:1414,thrust:.699,voltage:21.69,current:1.704},{pwm:1429,thrust:.726,voltage:21.69,current:1.796},{pwm:1443,thrust:.748,voltage:21.69,current:1.919},{pwm:1457,thrust:.774,voltage:21.69,current:2.05},{pwm:1470,thrust:.804,voltage:21.69,current:2.192},{pwm:1484,thrust:.838,voltage:21.69,current:2.369},{pwm:1498,thrust:.872,voltage:21.69,current:2.513},{pwm:1512,thrust:.915,voltage:21.68,current:2.788},{pwm:1526,thrust:.964,voltage:21.67,current:3.025},{pwm:1540,thrust:1.001,voltage:21.67,current:3.215},{pwm:1555,thrust:1.039,voltage:21.68,current:3.482},{pwm:1568,thrust:1.082,voltage:21.67,current:3.699},{pwm:1583,thrust:1.113,voltage:21.67,current:3.851},{pwm:1596,thrust:1.15,voltage:21.66,current:4.103},{pwm:1609,thrust:1.184,voltage:21.66,current:4.386},{pwm:1623,thrust:1.224,voltage:21.65,current:4.57},{pwm:1636,thrust:1.261,voltage:21.65,current:4.808},{pwm:1650,thrust:1.289,voltage:21.65,current:5},{pwm:1664,thrust:1.321,voltage:21.64,current:5.245},{pwm:1676,thrust:1.352,voltage:21.65,current:5.509},{pwm:1690,thrust:1.388,voltage:21.64,current:5.748},{pwm:1704,thrust:1.428,voltage:21.63,current:6.026},{pwm:1717,thrust:1.463,voltage:21.63,current:6.275},{pwm:1730,thrust:1.493,voltage:21.62,current:6.564},{pwm:1746,thrust:1.519,voltage:21.62,current:6.887},{pwm:1759,thrust:1.554,voltage:21.62,current:7.172},{pwm:1773,thrust:1.596,voltage:21.61,current:7.481},{pwm:1786,thrust:1.637,voltage:21.61,current:7.821},{pwm:1800,thrust:1.674,voltage:21.6,current:8.143},{pwm:1814,thrust:1.711,voltage:21.6,current:8.469},{pwm:1827,thrust:1.742,voltage:21.59,current:8.812},{pwm:1840,thrust:1.774,voltage:21.59,current:9.125},{pwm:1854,thrust:1.809,voltage:21.58,current:9.423},{pwm:1867,thrust:1.846,voltage:21.58,current:9.784},{pwm:1881,thrust:1.882,voltage:21.57,current:10.161},{pwm:1895,thrust:1.936,voltage:21.56,current:10.602},{pwm:1909,thrust:1.987,voltage:21.56,current:10.993},{pwm:1923,thrust:2.028,voltage:21.55,current:11.387},{pwm:1937,thrust:2.07,voltage:21.55,current:11.823},{pwm:1950,thrust:2.107,voltage:21.54,current:12.235},{pwm:1963,thrust:2.152,voltage:21.53,current:12.671},{pwm:1977,thrust:2.195,voltage:21.53,current:13.078},{pwm:1989,thrust:2.233,voltage:21.52,current:13.511},{pwm:2e3,thrust:2.254,voltage:21.52,current:13.854}],yt=.005,V=.001,x=Q(0,1,V),Z=(t,e,r,l,a,i)=>{function o(s,P,I){return s<P?P:s>I?I:s}function c(s){return s==0}function m(s){return Math.sqrt(s)}function T(s){const w=o(t,-1,1);if(c(w))return 1*s*1;const ut=(w-1+m((1-w)*(1-w)+4*w*1*s))/(2*w);return o(ut*1,0,1)}function _(s){return s=o(s,0,1),e+(r-e)*T(s)}function y(s){return l+(a-l)*s}const O=x.length;let L=new Array(O);for(let s=0;s<O;s++){const P=_(x[s]);L[s]=y(P)}const b=C(i.thrust,i.pwm,L);let N=new Array(O-1);for(let s=0;s<O-1;s++)N[s]=(b[s+1]-b[s])/V;const z=Nt(N);let k=0;for(let s=0;s<O-1;s++)k+=(N[s]-z)**2;const ot=Math.sqrt(k/N.length);return{corrected_thrust:b,gradient:N,mean:z,std_deviation:ot,expo:t}},St=(t,e,r,l,a)=>Q(-1,1,yt).reduce((o,c)=>{const m=Z(c,t,e,r,l,a);return!o||m.std_deviation<o.std_deviation?m:o},null),tt={pwm:0,thrust:0,voltage:0,current:0},g={MOT_PWM_MIN:1e3,MOT_PWM_MAX:2e3,MOT_SPIN_ARM:.1,MOT_SPIN_MIN:.15,MOT_SPIN_MAX:.95,MOT_THST_EXPO:.65},j={MOT_THST_HOVER:0},et={MOT_THST_HOVER:!0},rt={MOT_THST_EXPO:!1},H=(t,e,r)=>e+(r-e)*t,W=(t,e=(...r)=>JSON.stringify(r))=>{const r=new Map;return(...l)=>{const a=e(...l);if(r.has(a))return r.get(a);const i=t(...l);return r.set(a,i),i}},At=t=>{if(!t||typeof t!="object")return!1;const e=t;return typeof e.pwm=="number"&&typeof e.thrust=="number"&&typeof e.voltage=="number"&&typeof e.current=="number"},Et=()=>Pt.map(t=>({pwm:t.pwm,thrust:t.thrust,voltage:t.voltage,current:t.current})),bt=W(Z),It=W(St),Ht=W(C),E=f([]),n=K(),at=f([]),d=K(),R=f(!0),Rt=f(!0),p=f(Array(10).fill(null).map(()=>({...tt}))),G=f(null),A=f(!0),M=f(null),lt=v(()=>p.value.reduce((t,e)=>Math.max(t,e.thrust),0)||1),X=v(()=>{const t=d.value["Number of motors"],e=d.value["All-up weight (AUW)"];return t>0&&e>0?e/t:0}),nt=v(()=>E.value.length===0||p.value.length===0?!1:p.value.some(t=>t.thrust>0&&t.pwm>0)),D=t=>{try{if(!Array.isArray(t)||!t.every(At))throw new Error("invalid thrust data format");p.value=t,A.value=!0}catch(e){console.error("failed to update thrust data:",e)}},$=t=>{if(X.value>0){const e=C(x,t,[X.value])[0],r=Number(e.toFixed(3));Math.abs(r-d.value.MOT_THST_HOVER)>.001&&(d.value.MOT_THST_HOVER=r)}},Xt=()=>{D(Et()),d.value["All-up weight (AUW)"]=2.5},Ct=()=>{D(Array(10).fill(null).map(()=>({...tt}))),n.value.MOT_PWM_MIN=g.MOT_PWM_MIN,n.value.MOT_PWM_MAX=g.MOT_PWM_MAX,n.value.MOT_SPIN_ARM=g.MOT_SPIN_ARM,n.value.MOT_SPIN_MIN=g.MOT_SPIN_MIN,n.value.MOT_SPIN_MAX=g.MOT_SPIN_MAX,n.value.MOT_THST_EXPO=g.MOT_THST_EXPO,d.value["Number of motors"]=4,d.value["All-up weight (AUW)"]=0,d.value.MOT_THST_HOVER=0},Vt=v(()=>{if(!nt.value)return[];const t=p.value,e=t.length,r=new Array(e),l=new Array(e);for(let a=0;a<e;a++)r[a]=t[a].pwm,l[a]=t[a].thrust;return[{x:r,y:l,name:"Measured Thrust"}]}),h=v(()=>{if(!nt.value)return null;Ut.value;const t={pwm:p.value.map(r=>r.pwm),thrust:p.value.map(r=>r.thrust),voltage:p.value.map(r=>r.voltage),current:p.value.map(r=>r.current)};if(A.value){const r=It(n.value.MOT_SPIN_MIN,n.value.MOT_SPIN_MAX,n.value.MOT_PWM_MIN,n.value.MOT_PWM_MAX,t);return r.expo!==void 0&&!isNaN(r.expo)&&(A.value=!1,n.value.MOT_THST_EXPO=Number(r.expo.toFixed(3)),M.value=Number(r.std_deviation.toFixed(4))),$(r.corrected_thrust),r}const e=bt(n.value.MOT_THST_EXPO,n.value.MOT_SPIN_MIN,n.value.MOT_SPIN_MAX,n.value.MOT_PWM_MIN,n.value.MOT_PWM_MAX,t);return $(e.corrected_thrust),e}),Wt=v(()=>h.value?[{x:q(xt(x.slice(0,-1),V*.5),100),y:h.value.gradient,name:`Linearized Thrust<br>Std dev: ${h.value.std_deviation.toFixed(4)}`,line:{color:"indianred"}}]:[]),Dt=v(()=>h.value?{xaxis:{title:"Throttle (%)",range:[0,100]},yaxis:{title:"Thrust gradient (delta thrust / delta throttle)"},showlegend:!0,shapes:h.value.mean?[Mt({y:h.value.mean,color:"gray",dash:"4px,3px"})]:[]}:{xaxis:{title:"Throttle (%)"},yaxis:{title:"Thrust gradient (delta thrust / delta throttle)"}}),Lt=v(()=>{if(!h.value)return[];const t={pwm:p.value.map(_=>_.pwm),thrust:p.value.map(_=>_.thrust)},e=t.pwm.map(_=>((_-n.value.MOT_PWM_MIN)/(n.value.MOT_PWM_MAX-n.value.MOT_PWM_MIN)-n.value.MOT_SPIN_MIN)/(n.value.MOT_SPIN_MAX-n.value.MOT_SPIN_MIN)),r=Ht(t.thrust,e,x),l=q(x,100),a=Math.max(...h.value.corrected_thrust),i=h.value.corrected_thrust[0],o=a-i,c=l.map(_=>i+o*_/100),m=[{x:l,y:r,name:"Measured Thrust"},{x:l,y:h.value.corrected_thrust,name:"Linearized Thrust"},{x:l,y:c,name:"Ideal Response",line:{dash:"4px,3px",width:1,color:"gray"}}],T=d.value.MOT_THST_HOVER*100;return T>=0&&T<=100&&m.push({x:[T],y:[X.value],name:"THST_HOVER",mode:"markers",marker:{size:12,symbol:"diamond",color:"#059669"}}),m}),zt=v(()=>{const{MOT_PWM_MIN:t,MOT_PWM_MAX:e}=n.value;return{pwmSpinArm:H(n.value.MOT_SPIN_ARM,t,e),pwmSpinMin:H(n.value.MOT_SPIN_MIN,t,e),pwmSpinMax:H(n.value.MOT_SPIN_MAX,t,e)}}),kt=v(()=>{if(E.value.length===0)return{xaxis:{title:"ESC Signal (μs)"},yaxis:{title:"Thrust"}};const{pwmSpinArm:t,pwmSpinMin:e,pwmSpinMax:r}=zt.value,l=lt.value,a=[{x:t,color:"orange",label:"MOT_SPIN_ARM"},{x:e,color:"green",label:"MOT_SPIN_MIN"},{x:r,color:"red",label:"MOT_SPIN_MAX"}];return{xaxis:{title:"ESC Signal (μs)",range:[n.value.MOT_PWM_MIN,n.value.MOT_PWM_MAX]},yaxis:{title:"Thrust",range:[0,l]},shapes:a.map(({x:i,color:o})=>ft({x:i,yMax:l,color:o})),annotations:a.map(({x:i,label:o})=>Tt({x:i,label:o}))}}),Ft=v(()=>({xaxis:{title:"Throttle (%)",range:[0,100]},yaxis:{title:"Thrust",range:[0,lt.value]},showlegend:!0})),Ut=v(()=>{const t=n.value.MOT_SPIN_MIN,e=n.value.MOT_SPIN_MAX,r=n.value.MOT_PWM_MIN,l=n.value.MOT_PWM_MAX,a=`${t}-${e}-${r}-${l}`;return G.value!==a?(G.value=a,A.value=!0,!0):!1});Y(Object.keys(g),g,et,rt).then(t=>{const e=t.map(r=>r.Name==="MOT_THST_EXPO"?{...r,Increment:.001}:r);E.value=e,n.value=J(e)}).catch(t=>{console.error("failed to load thrust expo parameters:",t)}).finally(()=>{R.value=!1});Y(Object.keys(j),j,et,rt).then(t=>{t.splice(0,0,{Name:"Number of motors",Desc:"Number of thrust producing motors",Value:4,Range:{low:1,high:12}}),t.splice(1,0,{Name:"All-up weight (AUW)",Desc:"All-up weight including battery and payload. Must be same units as thrust data.",Value:0}),at.value=t,d.value=J(t)}).catch(t=>{console.error("Failed to load hover parameters:",t)}).finally(()=>{Rt.value=!1});const jt=[{field:"pwm",headerName:"ESC Signal (μs)",precision:0},{field:"thrust",headerName:"Thrust",precision:3},{field:"voltage",headerName:"Voltage (V)",precision:3},{field:"current",headerName:"Current (A)",precision:3}],Kt=()=>u("div",{className:"flex min-w-[580px] flex-row flex-wrap gap-3 pb-8",children:[u("div",{className:"w-full max-w-screen-xl",children:[u(vt,{title:"ArduPilot Thrust Expo",children:"This tool estimates thrust linearization using thrust test stand data. Load a parameter file or enter parameters manually. Copy and paste test stand data from a spreadsheet or enter it manually. Current data is optional (for reference only - not used in calculation). Once the plot is generated, adjust MOT_THST_EXPO to improve the linear fit. If the curve is poorly matched at the extremes, do not chase a perfect fit. Rather, focus on midrange throttle linearity."}),u("div",{className:"flex flex-col gap-3 px-3",children:[u(dt,{title:"Thrust Data",description:"Paste test stand data or drag and drop a CSV or delimited text file.",columns:jt,rows:p,onDataChange:D}),u("div",{className:"flex w-full flex-row flex-wrap justify-between gap-3",children:[u(U,{paramConfig:E,params:n,isLoading:R.value,description:"Manually enter parameters or drag and drop a parameter file.",className:"min-w-[550px] flex-1 basis-[550px]",variant:"narrow"}),u("div",{className:"flex min-w-[550px] flex-1 basis-[550px] flex-col",children:[u("div",{className:"flex-none",children:u(U,{title:"Hover Thrust Estimation",paramConfig:at,params:d,isLoading:R.value,description:"Optional: Enter number of motors and total mass to estimate hover thrust. Use MOT_HOVER_LEARN rather than setting the estimated value explicitly. The learned value may be useful to help validate the generated thrust curve.",variant:"narrow",suppressToolbar:!0})}),u("div",{className:"flex flex-1 flex-col",children:[h.value&&u("div",{className:"pl-2 pt-3 text-sm",children:u("div",{className:"flex flex-col gap-1 pb-2",children:[u("div",{className:"font-semibold",children:"Calculated Values :"}),u("div",{className:M.value&&Number(h.value.std_deviation.toFixed(4))<=M.value?"flex gap-4 font-semibold text-emerald-600":"flex gap-4 text-muted-foreground",children:[u("div",{children:["MOT_THST_EXPO: ",n.value.MOT_THST_EXPO.toFixed(3)]}),u("div",{children:["MOT_THST_HOVER:"," ",d.value.MOT_THST_HOVER.toFixed(3)]})]}),u("div",{className:M.value&&Number(h.value.std_deviation.toFixed(4))<=M.value?"font-semibold text-emerald-600":"text-muted-foreground",children:["StdDev: ",h.value.std_deviation.toFixed(4),M.value&&Number(h.value.std_deviation.toFixed(4))<=M.value&&" (optimal)"]})]})}),u("div",{className:"flex flex-1 flex-col justify-end",children:u("div",{className:"flex gap-3",children:[u(F,{variant:"outline",onClick:Xt,children:"Show Example"}),u(F,{variant:"outline",onClick:Ct,children:"Reset All"})]})})]})]})]})]})]}),u("div",{className:"flex w-full max-w-screen-xl flex-col gap-3",children:[u(S,{className:"h-[450px] w-full",data:Vt.value,layout:kt.value}),u(S,{className:"h-[450px] w-full",data:Lt.value,layout:Ft.value}),u(S,{className:"h-[450px] w-full",data:Wt.value,layout:Dt.value})]})]});export{Kt as ThrustExpo,Kt as default};
